# =============================================================================
# Use travis settings maximum_number_of_builds --set 1 as the builds envs depend on flickr
# =============================================================================
# language
language: python
python:
  - "2.7"
  - "3.6"
#  - "3.7-dev"   # Comment for faster test
# nightly gets the latest nightly version of python... python 3 in the case. For now I don't want that!
#  - "nightly"

# =============================================================================
# branches blacklist for TravisCI testing
#branches:
#  except:
#  - dev-apr18

before_install:
# For use with wget into github account
  - echo -e "machine github.com\n  login $CI_USER\n  password $CI_USER_PASSWORD" >> ~/.netrc

  - echo -e "files:\n  - /home/travis/build/oPromessa/flickr-uploader/nohup.lst\n  - /home/travis/build/oPromessa/flickr-uploader/nohup.log\ndestination:\n  $PT_HOSTNAME\n  $PT_PORT\n  $PT_PROTOCOL\n" > ~/syslog2.yml
  - cat ~/syslog2.yml

# =============================================================================
# command to install dependencies
install:
  - pip install -r requirements.txt
# Get deletr to delete all pics Flickr prior to a run
  - wget https://github.com/oPromessa/flickr-deletr/archive/master.tar.gz -O flickr-deletr-master.tar.gz
  - tar zxvf flickr-deletr-master.tar.gz
# Get papertrail.com remote_syslog2
#  - wget https://github.com/papertrail/remote_syslog2/releases/download/v0.19/remote_syslog_linux_i386.tar.gz -O remote_syslog_linux_i386.tar.gz
#  - tar zxvf remote_syslog_linux_i386.tar.gz
  #- ls -la remote_syslog
  #- ls -la
  # run python setup.py install
  - python setup.py install
  # run python setup.py installcfg
  - pythonVersion=`python -V 2>&1 | cut -d\  -f2`
  - python setup.py installcfg
  - python setup.py installcfg --folder /home/travis/virtualenv/python$pythonVersion/etc

# =============================================================================
# env
env:
  global:
    - PYTHONPATH=..:.
    - LC_ALL=en_US.utf8
    - LANG=en_US.utf8
# Set to -v for Verbose option of uploadr
    - VerboseVar=-v
    - BadFilesVar=-b
    - ExcludedVar=--remove-excluded
    - ListPhotosNotInSet="-l 100"
    - TAIL_LINES=20    # Tail $TAIL_LINES for output logging. Default: 20
    - WAIT_TIME=2      # Sleep time between first and second run
# Delete !!!!!!!!!!!!!!!!!!! CAREFULL !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# To ensure an empty Flickr database. Set DeleteAllFromFlickr=1. 0 otherwise.
    - DeleteAllFromFlickr=0
  # ---------------------------------------------------------------------------
  # Matrix of Test Scenarios
  #   Help
  #   DryRun (disabled for now)
  #   Badfiles (disabled for now)
  #   Multiprocessing
  #   addAlbumsMigrate
  #   RemoveReplace, Multiprocessing
  #   ExcludedFolders+IgnoredFiles in Single Processing mode. Also test cleaning up badfiles database entries and listing files not in set
  #   Old273INI
  #   NoVerbose

  matrix:
# TestScenario: Help, Delete DryRun, BadFiles, MultiProcessing, Remove, Replace, RemoveReplace, Old273INI
# Help
    - TestScenario=Help UploadrOptions="$VerboseVar --help" DeleteAllFromFlickr=1
# DryRun
    #- TestScenario=DryRun UploadrOptions="$VerboseVar -n"
# Badfiles
    #- TestScenario=BadFiles UploadrOptions="$VerboseVar $BadFilesVar"
# Multiprocessing
    - TestScenario=MultiProcessing UploadrOptions="$VerboseVar $BadFilesVar -p 25"
# addAlbumsMigrate. Option --add-albums-migrate is added on SECOND RUN
    - TestScenario=addAlbumsMigrate UploadrOptions="$VerboseVar $BadFilesVar -p 25"
# RemoveReplace, Multiprocessing. Also test cleaning up badfiles database entries
    - TestScenario=RemoveReplace UploadrOptions="$VerboseVar $BadFilesVar $ListPhotosNotInSet -p 10 -c"
# ExcludedFolders+IgnoredFiles in Single Processing mode. Also test cleaning up badfiles database entries and listing files not in set
    - TestScenario=ExcludedFolders UploadrOptions="$VerboseVar $BadFilesVar $ExcludedVar -c -l 50"
# Old273INI to test previous INI config file format using os.path.dirname(sys.argv[0]) vs os.getcwd()
    - TestScenario=Old273INI UploadrOptions="$VerboseVar $BadFilesVar $ExcludedVar -p 10"
#   NoVerbose
    - TestScenario=NoVerbose UploadrOptions="-p 25"
    
# =============================================================================
# before_script
#    - Get database token ready
#    - Get uploadr.ini from tests
#    - Use environment secure variable for private settings
before_script:
  - pwd
  - pythonVersion=`python -V 2>&1 | cut -d\  -f2`
  - echo $pythonVersion
  - echo Travis Python Version
  - echo ${TRAVIS_PYTHON_VERSION}
  - cp tests/uploadr.ini .
  - cp tests/uploadr.ini /home/travis/virtualenv/python$pythonVersion/bin/uploadr.ini || cp tests/uploadr.ini /home/travis/virtualenv/python${TRAVIS_PYTHON_VERSION}/bin/uploadr.ini
  - grep FILES_DIR uploadr.ini
#  - cat uploadr.ini
  - echo "INSERT INTO oauth_tokens ( api_key, lookup_key, oauth_token, oauth_token_secret, access_level, fullname, username, user_nsid) VALUES ( '"$api_key"', '', '"$oauth_token"', '"$oauth_token_secret"', 'delete', '"$fullname"', '"$username"', '"$user_nsid"');" | sqlite3 token/oauth-tokens.sqlite
  - sqlite3 token/oauth-tokens.sqlite 'SELECT * FROM oauth_tokens;'
  - find "./tests/Test Photo Library" -type f -exec md5sum '{}' \;
#  - remote_syslog/remote_syslog -c ~/syslog2.yml
# Prevent errors in case log and err files are not generated
  - touch build.txt
  - touch /home/travis/build/oPromessa/flickr-uploader/nohup.log
  - touch /home/travis/build/oPromessa/flickr-uploader/nohup.lst

# =============================================================================
# run script for tests
script:
# pytest --flakes (Code analysis) ---------------------------------------------
  - pytest -v --flakes
# pytest ----------------------------------------------------------------------
  - pytest -v
# pytest --doctest-modules ----------------------------------------------------
  - pytest --doctest-modules
# flake8
  - flake8

# DELETE RUN ------------------------------------------------------------------
# !!!!!!!!!!!!!!!!!!!!!!!!!! CAREFULL !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# COMPATIBLE WITH PYTHON 2.7 ONLY
  - if [[ $TRAVIS_PYTHON_VERSION == 2* && $DeleteAllFromFlickr == 1 ]]; then cp flickr-deletr-master/tests/uploadr.ini flickr-deletr-master/uploadr.ini; fi
  - if [[ $TRAVIS_PYTHON_VERSION == 2* && $DeleteAllFromFlickr == 1 ]]; then cp token/oauth-tokens.sqlite flickr-deletr-master/token/oauth-tokens.sqlite; fi
  - if [[ $TRAVIS_PYTHON_VERSION == 2* && $DeleteAllFromFlickr == 1 ]]; then coverage run -a --concurrency multiprocessing ./flickr-deletr-master/delete.py; fi

# First RUN -------------------------------------------------------------------
  # stdout to file, stderr to file
  - coverage run -a --concurrency multiprocessing uploadr.py $VerboseVar $UploadrOptions > /home/travis/build/oPromessa/flickr-uploader/nohup.log 2> /home/travis/build/oPromessa/flickr-uploader/nohup.lst
  # stdout to file, stderr to console
  #- coverage run -a --concurrency multiprocessing uploadr.py $VerboseVar $UploadrOptions > /home/travis/build/oPromessa/flickr-uploader/nohup.log
  - tail -$TAIL_LINES /home/travis/build/oPromessa/flickr-uploader/nohup.log
  - tail -$TAIL_LINES /home/travis/build/oPromessa/flickr-uploader/nohup.lst

  - coverage combine
  - coverage report -m uploadr.py

# DB OUTPUT for REFERENCE RUN#1------------------------------------------------
  - if [[ $TestScenario != Help ]]; then sqlite3 flickrdb "SELECT *, datetime( last_modified, 'unixepoch', 'localtime') FROM files ORDER BY path;"; fi
  - if [[ $TestScenario != Help ]]; then sqlite3 flickrdb 'SELECT * FROM badfiles ORDER BY path;'; fi
  - if [[ $TestScenario != Help ]]; then sqlite3 flickrdb 'SELECT * FROM sets ORDER BY name;'; fi
  - if [[ $TestScenario != Help ]]; then sqlite3 flickrdb 'SELECT sets.set_id, sets.name, count(*) FROM sets, files WHERE sets.set_id = files.set_id GROUP BY 1, 2 ORDER BY 2;'; fi
  - if [[ $TestScenario != Help ]]; then sqlite3 flickrdb 'SELECT sets.set_id, sets.name, files_id, path FROM sets, files WHERE sets.set_id = files.set_id ORDER BY sets.name, path;'; fi

# WAIT TIME BEFORE SECOND RUN -------------------------------------------------
  - sleep $WAIT_TIME

# Second RUN: Remove, Replace, RemoveReplace, ExcludedFolders, addAlbumsMigrate
  - if [[ $TestScenario == addAlbumsMigrate ]]; then sqlite3 flickrdb 'PRAGMA user_version="2"'; fi
  - if [[ $TestScenario == addAlbumsMigrate ]]; then export UploadrOptions="$UploadrOptions --add-albums-migrate"; echo $UploadrOptions; fi

  - if [[ $TestScenario == RemoveReplace ]]; then rm "./tests/Test Photo Library/photo.jpg"; fi
  - if [[ $TestScenario == RemoveReplace ]]; then rm "./tests/Test Photo Library/photo_Excepção.jpg"; fi
  - if [[ $TestScenario == RemoveReplace ]]; then cp "./tests/Test Photo Library/ReplaceTest/file_34_Substituição.ForReplace" "./tests/Test Photo Library/Pics.Replaced/file_34_Substituição.jpg"; fi
  - if [[ $TestScenario == RemoveReplace ]]; then cp "./tests/Test Photo Library/ReplaceTest/file_35.jpg.ForReplace" "./tests/Test Photo Library/Pics.Replaced/file_35.jpg"; fi
  - if [[ $TestScenario == RemoveReplace ]]; then cp "./tests/Test Photo Library/ReplaceTest/Video03.ToReplace.MP4.ForReplace" "./tests/Test Photo Library/Pics.Replaced/Video03.ToReplace.MP4"; fi

  - if [[ $TestScenario == ExcludedFolders ]]; then cp ./tests/uploadr_excluded.ini ./uploadr.ini; fi

  - if [[ $TestScenario == Old273INI ]]; then cp ./tests/uploadr_excluded_2.7.3.ini ./uploadr.ini; fi
  
  - if [[ $TestScenario == NoVerbose ]]; then cp ./tests/uploadr_NoVerbose.ini ./uploadr.ini; fi

  - coverage run -a --concurrency multiprocessing uploadr.py $UploadrOptions >> /home/travis/build/oPromessa/flickr-uploader/nohup.log 2>> /home/travis/build/oPromessa/flickr-uploader/nohup.lst
  - tail -$TAIL_LINES /home/travis/build/oPromessa/flickr-uploader/nohup.log
  - tail -$TAIL_LINES /home/travis/build/oPromessa/flickr-uploader/nohup.lst

  - coverage combine
  - coverage report -m uploadr.py
  - sleep $WAIT_TIME

# Deleted Pics Non existant on FLickr -----------------------------------------
# For testing a local deleted file also not available in flickr
# - sleep $WAIT_TIME
# Test Deleted file
#  - coverage run -a uploadr.py $VerboseVar -bl 10
#  - coverage report -m uploadr.py
#  - sqlite3 flickrdb "SELECT *, datetime( last_modified, 'unixepoch', 'localtime') FROM files;"

# after_failure ---------------------------------------------------------------
# Attempt to catch "Build times out because no output was received"
after_failure:
# After failure: Save build related data
  - echo -e "TRAVIS_PYTHON_VERSION|TRAVIS_TEST_RESULT|TRAVIS_EVENT_TYPE|TRAVIS_COMMIT|TRAVIS_COMMIT_MESSAGE|TRAVIS_BUILD_DIR|TRAVIS_BUILD_ID|TRAVIS_BUILD_NUMBER|TRAVIS_JOB_NUMBER" > build.txt
  - echo -e "$TRAVIS_PYTHON_VERSION|$TRAVIS_TEST_RESULT|$TRAVIS_EVENT_TYPE|$TRAVIS_COMMIT|$TRAVIS_COMMIT_MESSAGE|$TRAVIS_BUILD_DIR|$TRAVIS_BUILD_ID|$TRAVIS_BUILD_NUMBER|$TRAVIS_JOB_NUMBER" >> build.txt
#
# Upload LOG/ERR files to dropbox
  - python tests/drop.py --token $DROPBOX_TOKEN build.txt $TRAVIS_BUILD_NUMBER/$TRAVIS_JOB_NUMBER
  - python tests/drop.py --token $DROPBOX_TOKEN nohup.log $TRAVIS_BUILD_NUMBER/$TRAVIS_JOB_NUMBER
  - python tests/drop.py --token $DROPBOX_TOKEN nohup.lst $TRAVIS_BUILD_NUMBER/$TRAVIS_JOB_NUMBER
  
  - tail -$TAIL_LINES /home/travis/build/oPromessa/flickr-uploader/nohup.log
  - tail -$TAIL_LINES /home/travis/build/oPromessa/flickr-uploader/nohup.lst

# after_script ----------------------------------------------------------------
after_script:
# MD5SUM Output for REFERENCE -------------------------------------------------
#  - if [[ $TestScenario == RemoveReplace ]]; then find "./tests/Test Photo Library" -type f -exec md5sum '{}' \; ; fi

# DB OUTPUT for REFERENCE RUN#2------------------------------------------------
  - sqlite3 flickrdb "SELECT *, datetime( last_modified, 'unixepoch', 'localtime') FROM files ORDER BY path;"
  - sqlite3 flickrdb 'SELECT * FROM badfiles ORDER BY path;'
  - sqlite3 flickrdb 'SELECT * FROM sets ORDER BY name;'
  - sqlite3 flickrdb 'SELECT sets.set_id, sets.name, count(*) FROM sets, files WHERE sets.set_id = files.set_id GROUP BY 1, 2 ORDER BY 2;'
  - sqlite3 flickrdb 'SELECT sets.set_id, sets.name, files_id, path FROM sets, files WHERE sets.set_id = files.set_id ORDER BY sets.name, path;'

# After script: Save build related data
  #- echo -e "TRAVIS_PYTHON_VERSION|TRAVIS_TEST_RESULT|TRAVIS_EVENT_TYPE|TRAVIS_COMMIT|TRAVIS_COMMIT_MESSAGE|TRAVIS_BUILD_DIR|TRAVIS_BUILD_ID|TRAVIS_BUILD_NUMBER|TRAVIS_JOB_NUMBER" > build.txt
  #- echo -e "$TRAVIS_PYTHON_VERSION|$TRAVIS_TEST_RESULT|$TRAVIS_EVENT_TYPE|$TRAVIS_COMMIT|$TRAVIS_COMMIT_MESSAGE|$TRAVIS_BUILD_DIR|$TRAVIS_BUILD_ID|$TRAVIS_BUILD_NUMBER|$TRAVIS_JOB_NUMBER" >> build.txt
  - echo -e "TRAVIS_TEST_RESULT:\t${TRAVIS_TEST_RESULT}\nTRAVIS_PYTHON_VERSION:\t${TRAVIS_PYTHON_VERSION}\nTRAVIS_BUILD_DIR:\t${TRAVIS_BUILD_DIR}\nTRAVIS_BUILD_ID:\t${TRAVIS_BUILD_ID}\nTRAVIS_BUILD_NUMBER:\t${TRAVIS_BUILD_NUMBER}\nTRAVIS_JOB_NUMBER:\t${TRAVIS_JOB_NUMBER}TRAVIS_EVENT_TYPE:\t${TRAVIS_EVENT_TYPE}\nTRAVIS_COMMIT:\t\t${TRAVIS_COMMIT}\nTRAVIS_COMMIT_MESSAGE:\t${TRAVIS_COMMIT_MESSAGE}\n" >> build.txt
# Upload LOG/ERR files to Dropbox
  - python tests/drop.py --token $DROPBOX_TOKEN build.txt $TRAVIS_BUILD_NUMBER/$TRAVIS_JOB_NUMBER
  - python tests/drop.py --token $DROPBOX_TOKEN nohup.log $TRAVIS_BUILD_NUMBER/$TRAVIS_JOB_NUMBER
  - python tests/drop.py --token $DROPBOX_TOKEN nohup.lst $TRAVIS_BUILD_NUMBER/$TRAVIS_JOB_NUMBER
  
# Deploy to Heroku ------------------------------------------------------------
deploy:
  provider: heroku
  api_key: $HEROKU_API_KEY
  #app: uploadr-showcase
  on:
    branch: master
    #branch: do-not-load-duplicates
    #repo: oPromessa/flickr-uploadr
