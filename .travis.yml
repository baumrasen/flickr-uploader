# =============================================================================
# Use travis settings maximum_number_of_builds --set 1 as the builds envs depend on flickr
# =============================================================================
# language
language: python
python:
  - "2.7"
  - "3.6"
# nightly gets the latest nightly version of python... python 3 in the case. For now I don't want that!
#  - "nightly"

before_install:
# For use with wget into github account
  - echo -e "machine github.com\n  login $CI_USER\n  password $CI_USER_PASSWORD" >> ~/.netrc

  - echo -e "files:\n  - /home/travis/build/oPromessa/flickr-uploader/nohup.err\n  - /home/travis/build/oPromessa/flickr-uploader/nohup.log\ndestination:\n  $PT_HOSTNAME\n  $PT_PORT\n  $PT_PROTOCOL\n" > ~/syslog2.yml
  - cat ~/syslog2.yml  
  
# =============================================================================
# command to install dependencies
install:
  - pip install -r requirements.txt
# Get deletr. For future use to delete all pics frmo Flickr prior to a run
  - wget https://github.com/oPromessa/flickr-deletr/archive/master.tar.gz -O flickr-deletr-master.tar.gz
  - tar zxvf flickr-deletr-master.tar.gz
# Get papertrail.com remote_syslog2
  - wget https://github.com/papertrail/remote_syslog2/releases/download/v0.19/remote_syslog_linux_i386.tar.gz -O remote_syslog_linux_i386.tar.gz
  - tar zxvf remote_syslog_linux_i386.tar.gz
  #- ls -la remote_syslog
  #- ls -la
  
# =============================================================================
# env
env:
  global:
    - PYTHONPATH=..:.
    - LC_ALL=en_US.utf8
    - LANG=en_US.utf8
# Set to -v for Verbose option of uploadr
    - VerboseVar=-v
    - BadFilesVar=-b
# Tail $TAIL_LINES for when use Papertrail
  matrix:
# TestScenario: Help, Delete DryRun, BadFiles, MultiProcessing, Remove, Replace, RemoveReplace
# Help
    - TestScenario=Help UploadrOptions="$VerboseVar --help"
# Delete !!!!!!!!!!!!!!!!!!! CAREFULL !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    #- TestScenario=Delete UploadrOptions="$VerboseVar"    
# DryRun
    #- TestScenario=DryRun UploadrOptions="$VerboseVar -n"  
# Badfiles  
    #- TestScenario=BadFiles UploadrOptions="$VerboseVar $BadFilesVar"
# Multiprocessing  
    - TestScenario=MultiProcessing UploadrOptions="$VerboseVar $BadFilesVar -p 5"
# Remove
    #- TestScenario=Remove UploadrOptions="$VerboseVar $BadFilesVar"
# Replace
    #- TestScenario=Replace UploadrOptions="$VerboseVar $BadFilesVar"
# RemoveReplace
    - TestScenario=RemoveReplace UploadrOptions="$VerboseVar $BadFilesVar"

# =============================================================================
# before_script
# Get database token ready
# Get uploadr.ini from tests
# Use environment secure variable for private settings
before_script:
  - pwd
#  - ls -laR
  - cp tests/uploadr.ini .
  - cp tests/uploadr.ini /home/travis/virtualenv/python2.7.14/bin/uploadr.ini
  - grep FILES_DIR uploadr.ini
#  - cat uploadr.ini
  - echo "INSERT INTO oauth_tokens ( api_key, lookup_key, oauth_token, oauth_token_secret, access_level, fullname, username, user_nsid) VALUES ( '"$api_key"', '', '"$oauth_token"', '"$oauth_token_secret"', 'delete', '"$fullname"', '"$username"', '"$user_nsid"');" | sqlite3 token/oauth-tokens.sqlite
  - sqlite3 token/oauth-tokens.sqlite 'SELECT * FROM oauth_tokens;'
  - md5sum "./tests/Test Photo Library/Pics"/*
  - remote_syslog/remote_syslog -c ~/syslog2.yml  
  
# =============================================================================
# run script for tests  
script:
# DELETE RUN ------------------------------------------------------------------
# !!!!!!!!!!!!!!!!!!!!!!!!!! CAREFULL !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  - if [[ $TestScenario == Delete ]]; then cp flickr-deletr-master/tests/uploadr.ini flickr-deletr-master/uploadr.ini; fi
  - if [[ $TestScenario == Delete ]]; then cp token/oauth-tokens.sqlite flickr-deletr-master/token/oauth-tokens.sqlite; fi
  - if [[ $TestScenario == Delete ]]; then coverage run -a --concurrency multiprocessing ./flickr-deletr-master/delete.py; fi
  
# First RUN -------------------------------------------------------------------
#  - coverage run -a --concurrency multiprocessing uploadr.py $VerboseVar -p 2
  - coverage run -a --concurrency multiprocessing uploadr.py $VerboseVar $UploadrOptions > /home/travis/build/oPromessa/flickr-uploader/nohup.log 2> /home/travis/build/oPromessa/flickr-uploader/nohup.err
  - tail -10 /home/travis/build/oPromessa/flickr-uploader/nohup.log
  - tail -10 /home/travis/build/oPromessa/flickr-uploader/nohup.err
  
  - coverage combine
  - coverage report -m uploadr.py
  - sleep 5
# Second RUN ------------------------------------------------------------------
  - if [[ $TestScenario == Remove ]]; then rm "./tests/Test Photo Library/photo.jpg"; fi
  - if [[ $TestScenario == Replace ]]; then cp "./tests/Test Photo Library/ReplaceTest/file_35.jpg.ForReplace" "./tests/Test Photo Library/Pics/file_35.jpg"; fi
  - if [[ $TestScenario == RemoveReplace ]]; then rm "./tests/Test Photo Library/photo.jpg"; fi
  - if [[ $TestScenario == RemoveReplace ]]; then cp "./tests/Test Photo Library/ReplaceTest/file_35.jpg.ForReplace" "./tests/Test Photo Library/Pics/file_35.jpg"; fi
  - coverage run -a --concurrency multiprocessing uploadr.py $VerboseVar $UploadrOptions >> /home/travis/build/oPromessa/flickr-uploader/nohup.log 2>> /home/travis/build/oPromessa/flickr-uploader/nohup.err
  - tail -10 /home/travis/build/oPromessa/flickr-uploader/nohup.log
  - tail -10 /home/travis/build/oPromessa/flickr-uploader/nohup.err
  
  - coverage combine
  - coverage report -m uploadr.py

# pytest --flakes (Code analysis) ---------------------------------------------
  - pytest -v --flakes
#  - pytest -v # or py.test for Python versions 3.5 and below
  - pytest --doctest-modules # Attempt to run test_*.txt with doctest

# Deleted Pics Non existant on FLickr -----------------------------------------
# For testing a local deleted file also not available in flickr
# - sleep 10
# Test Deleted file
#  - coverage run -a uploadr.py $VerboseVar -bl 10  
#  - coverage report -m uploadr.py
#  - sqlite3 flickrdb "SELECT *, datetime( last_modified, 'unixepoch', 'localtime') FROM files;"

after_script:
# MD5SUM Output for REFERENCE -------------------------------------------------
  - if [[ $TestScenario == RemoveReplace ]]; then md5sum "./tests/Test Photo Library/Pics"/*; fi
  - if [[ $TestScenario == RemoveReplace ]]; then md5sum "./tests/Test Photo Library/Pics"/*; fi
  
# DB OUTPUT for REFERENCE -----------------------------------------------------
  - sqlite3 flickrdb "SELECT *, datetime( last_modified, 'unixepoch', 'localtime') FROM files;"
  - sqlite3 flickrdb 'SELECT * FROM badfiles;'
  - sqlite3 flickrdb 'SELECT * FROM sets;'
  - sqlite3 flickrdb 'SELECT sets.set_id, sets.name, count(*) FROM sets, files WHERE sets.set_id = files.set_id GROUP BY 1, 2;'
  - sqlite3 flickrdb 'SELECT sets.set_id, sets.name, files_id, path FROM sets, files WHERE sets.set_id = files.set_id ORDER BY sets.set_id, path;'

# Deploy to Heroku ------------------------------------------------------------
deploy:
  provider: heroku
  api_key: $HEROKU_API_KEY
  #app: uploadr-showcase
  on:
    branch: parallel-createSets
    #repo: oPromessa/flickr-uploadr
